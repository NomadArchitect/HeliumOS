QEMU=${QEMU:-"qemu-system-x86_64"}
BOCHS=${BOCHS:-"bochs"}

QEMU_FLAGS="-serial stdio"
BOCHS_FLAGS=""

VERB=${1:-"help"}
MODE=${3:-"debug"}


PROJECT_DIR=${PROJECT_DIR:-$PWD}
PROJECT_FILE=${PROJECT_FILE:-"${PROJECT_DIR}/sbs.project"}

KERNEL_FILE="build/${MODE}/kernel.elf"

help() {
    echo \
"\
Usage: sbs <verb=help> <mode=debug>
Verbs:
    help    (default): show this menu
    build            : build the kernel
    clean            : clean object files
    iso              : generate the iso file
    run-qemu         : boots the iso file with qemu
    run-bochs        : boots the iso file with bochs
    all              : equivalent to build->iso
    all-bochs        : equivalent to all->run-bochs
    all-qemu         : equivalent to all->run-qemu
    all-qemu-no-grub : build the kernel and boot with qemu directly
    install          : copies the kernel to /boot/helium_os.elf or to /boot/<arg1> if arg1 is specified
Modes:
    debug   (default): for debug   builds
    release          : for release builds\
"
}

clean() {
    echo "Cleaning objects and temporary files"
    if [[ -f ${PROJECT_FILE} ]]; then
        source ${PROJECT_FILE}
    else
        echo "Project file not found!"
        exit 1
    fi
    BUILD_DIR=${BUILD_DIR:-"${PROJECT_DIR}/build/"}
    _RBDIR=${_RBDIR:-"${BUILD_DIR}/"}
    [[ -d "${_RBDIR}/" ]] && rm -rf "${_RBDIR}/"
    [[ -d ".sbs/tmp" ]] && rm -rf ".sbs/tmp"
    [[ -f "isodir/boot/helium.elf" ]] && rm -rf "isodir/boot/helium.elf"
    [[ -f "run/bx_enh_dbg.ini" ]] && rm -rf "run/bx_enh_dbg.ini"
    [[ -f "run/helium.iso" ]] && rm -rf "run/helium.iso"
    [[ -f "run/bochslog.txt" ]] && rm -rf "run/bochslog.txt"
    [[ -f "run/mem.out" ]] && rm -rf "run/mem.out"
    echo "Cleaned!"
}

iso() {
    if [[ -f ${KERNEL_FILE} ]]; then
        if [[ ! $(command -v grub-file) ]]; then
            echo "Please install grub before generating the iso"
        fi
        echo ${PWD}
        grub-file --is-x86-multiboot ${KERNEL_FILE}
        if [[ ${?} -ne 0 ]]; then
            echo "Kernel file is not multiboot compliant"
            exit 1
        else
            echo "Kernel file is multiboot compliant"
        fi
        cp ${KERNEL_FILE} isodir/boot/helium.elf
        mkdir -p run/
        grub-mkrescue isodir -o run/helium.iso
        if [[ $? -ne 0 ]]; then
            exit 1
        fi
    else
        echo "Kernel not found at: ${KERNEL_FILE}"
        echo "Try building first with: 'sbs build'"
    fi
}

run-qemu() {
    cd run
    if [[ -f helium.iso ]]; then
        ${QEMU} ${QEMU_FLAGS} -cdrom helium.iso
        exit $?
    else
        echo "helium.iso file not found, try generating it first with 'sbs iso'"  
    fi
}

run-bochs() {
    cd run
    if [[ -f helium.iso ]]; then
        ${BOCHS} ${BOCHS_FLAGS} -f bochs.cfg -rc bochsrc -q
        exit $?
    else
        echo "helium.iso file not found, try generating it first with 'sbs iso'"  
    fi
}

all() {
    build
    iso
}
all-bochs() {
    all
    run-bochs
}

all-qemu() {
    all
    run-qemu
}

all-qemu-no-grub() {
    build
    ${QEMU} ${QEMU_FLAGS} -kernel build/debug/kernel.i686-pc.elf
}

install() {
    if [[ -f build/debug/kernel.i686-pc.elf ]]; then
        sudo cp build/debug/kernel.i686-pc.elf /boot/${1:-"helium_os.elf"}
    else
        echo "Kernel file not found, try generating it first with 'sbs build'"
    fi
}
